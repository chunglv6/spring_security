{"ast":null,"code":"import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { User } from 'src/app/model/user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let XhrInterceptor = /*#__PURE__*/(() => {\n  class XhrInterceptor {\n    constructor(router) {\n      this.router = router;\n      this.user = new User();\n    }\n\n    intercept(req, next) {\n      let httpHeaders = new HttpHeaders();\n      this.user = JSON.parse(sessionStorage.getItem('userdetails'));\n\n      if (this.user && this.user.password && this.user.email) {\n        httpHeaders = httpHeaders.append('Authorization', 'Basic ' + btoa(this.user.email + ':' + this.user.password));\n      }\n\n      let jwt = sessionStorage.getItem(\"Authorization\");\n\n      if (jwt) {\n        httpHeaders = httpHeaders.append('Authorization', jwt);\n      }\n\n      httpHeaders = httpHeaders.append('X-Requested-With', 'XMLHttpRequest');\n      const xhr = req.clone({\n        headers: httpHeaders\n      });\n      return next.handle(xhr).pipe(tap(() => {}, err => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status !== 401) {\n            return;\n          }\n\n          this.router.navigate(['dashboard']);\n        }\n      }));\n    }\n\n  }\n\n  XhrInterceptor.ɵfac = function XhrInterceptor_Factory(t) {\n    return new (t || XhrInterceptor)(i0.ɵɵinject(i1.Router));\n  };\n\n  XhrInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: XhrInterceptor,\n    factory: XhrInterceptor.ɵfac\n  });\n  return XhrInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}